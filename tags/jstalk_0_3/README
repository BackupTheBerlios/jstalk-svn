JSTalk
======

    JSTalk is a tool entirely written in JavaScript, using the Rhino 
    implementation for the Java(tm) platform. It provides a class-based core 
    and the basic tools wich can be found in many Smalltalk environments.

    To run it, all you need is a java environment with Swing support and the 
    Rhino JavaScript (or, simply Sun's Java SDK 6, wich comes with the binary JS 
    shell "jrunscript").

 * Easily executing

    If you have Sun's SDK 6, make sure you have the binary "jrunscript"
    in your path. Then, simply execute the script jstalk.sh

      $ ./jstak.sh

    You can also execute JSTalk with a custom version of Rhino. To do this,
    edit the file jstalk-rhino.js and chage the command line making sure
    that Rhino (js.jar last time I checked) is in your classpath. Then,
    execute jstalk-rhino.js

      $ ./jstalk-rhino.js



  * What is there and what can be done? (ultra-quick overview)

    o Workspace

      First, there is the Workspace (It is the first dialog that pops up). It 
      has a textarea where you can type in JS code, select and execute them with
      "Do it" (CTRL+D), "Print it" (CTRL+P), and "Inspect it" (CTRL+I).
  
      -"Do it" will simply execute/evaluate the selected code.

      -"Print it" will do the same as "Do it", but will print & select the 
        result.

      -"Inspect it" will do the same as "Do it", but will open an Inspector for
        the result.
    
      
      Also, the Workspace has an interesting method named 'print', wich 
      will append the value in the text area. Try selecting and executing the 
      following code in the workspace:


        for(var i = 0; i < 10; i++) { Workspace.print(i) }


      And, to demonstrate the use of the Java Swing, try executing this:


        pkg.javax.swing.JOptionPane.showMessageDialog(null, 'Hello World!')



    o Inspector
      
      This is the dialog that let us inspect the properties of a given
      object.

      To inspect the Workspace object, for instance, we execute the following
      code

        

        Inspector.inspect(Workspace.windows()[0])


      Selecting the code "Workspace.windows()[0]" and typing CTRL+I will 
      do the same.

      Once inspecting the properties, you can change and commit it's values
      with the 'Accept' command (CTRL+S)

    o ClassBrowser

     The ClassBrowser is where we define easily new classes. It shows
     all classes loaded, their methods and their hierarchy. 

     To commit the code typed in the code area, use the 'Accept' command
     (CTRL+S)


  * Notes on the core and class-based programming

    o Source files

      All JSTalk classes are contained in .jst files. These are files
      with a custom notation wich are parsed and loaded by the $ClassLoader
      object. The main reason I made this (instead of having regular .js 
      files with pure JavaScript) is because JavaScript functions don't 
      remember their comments. Parsing a file to have the functions as text
      allowed me to record the original source text.

    o JavaScript classes?

      Yes! I understand the OO prototype-based nature of JavaScript, 
      but right now I don't think I have the skills to come out with a good 
      system organization for "prototype objects". Since I know classes, having
      those made my life easier. 

      So, let me say that I know I might have killed many bennefits 
      of prototype-based OO by implementing (and maybe, forcing the use of) 
      classes. 
    

      Having said all that, the relevant code for the class implementation is 
      written in the JSObject, wich is the root class. Subclasses are created 
      calling subclass() method. For example:


        //creates a subclass of JSObject called Person
        JSObject.subclass({
            name: 'Person',
            attributes: ['name', 'email'],
            methods: {
              sayHello: function() {
                print('hello')
              }
            }}) 


      Is worth mentioning that JSObject (and every other class) is not
      a function object, so they are not JS constructors. Therefore 
      you can not apply "new" to them:


        o = new JSObject; //error!
        p = new Person;   //error!
      

      To create instances, you must call methods. The convention is the method
      create(). For example:


        o = JSObject.create(); //creates an JSObject
        p = Person.create();   //creates a Person


    o Fileout and saving the works


      So, declaring and changing the system is cool, but once you terminate
      the program, every change is lost. To make them persistent, those changes
      need to be in the .jst files, wich contain the source for every class of 
      the system.
      
      To fileout the classes to .jst files, you can use the class Fileout. For
      example, to create the Person.jst file, you can execute the following
      code:


          Fileout.create().fileoutClass(Person)


      To load a class from a .jst file, we use the $ClassLoader.load() method:

          $ClassLoader.load('Person')

      And, to have the class loaded automatically, edit the method 
      SystemDictionary#loadClasses and add your class there (don't
      forget to fileout the class SystemDictionary)
      

  * Feedback

    So, this is a very experimental project but if you liked the idea and   
    want to contribute with patches, toughts, etc, please let me know!
    
-----------------------------------------------
Author: Thiago Silva <tsilva@sourcecraft.info>
Date: 07/04/2007
