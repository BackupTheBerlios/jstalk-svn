name: JSTextArea
superclass: JSObject
space: null
attributes: [targetObj,widget]
class_attributes: []
doc: ""

#append:
function (str) {
    //reset selection when appending printing
    var pos = this._widget.getCaretPosition();
    this._widget.append(str);
    this._widget.select(pos, pos);
}


#clearSelection:
function () {
    this._widget.select(0, 0);
}


#doIt:
function () {
    //transform the selected text into function
    //and execute it in the global scope (ie. 'this' is the Global Object)
    try {
        this.evalSelected();
    }
    catch (e) {
        pkg.javax.swing.JOptionPane.showMessageDialog(null, "DoIt: " + e.toSource());
    }
}


#evalSelected:
function () {
    var f;
    f = new Function("return eval(" + String(this.selectedCode()).rep() + ")");
    if (!f) {
        puts("nothing to do!");
    } else {
        return f.call(this._targetObj);
    }
}


#evalText:
function () {
    var f;
    f = new Function("return (" + String(this._widget.getText()) + ")");
    if (!f) {
        puts("nothing to do!");
    } else {
        return f.call(this._targetObj);
    }
}


#hasSelection:
function () {
    return this._widget.getSelectedText() ? true : false;
}


#initialize:
function (obj) {
    this._targetObj = obj ? obj : $global;
    this._widget = new pkg.javax.swing.JTextArea();
}


#inspectIt:
function () {
    //Evaluate the selected code (should return an object)
    //and opens an inspector to that object
    try {
        var r = this.evalSelected();
        if (r) {
            Inspector.inspect(r);
        }
    }
    catch (e) {
        pkg.javax.swing.JOptionPane.showMessageDialog(null, "InspectIt: " + e.toSource());
    }
}


#printIt:
function () {
    //Evaluate the selected code (should return an object)
    //and opens an inspector to that object
    try {
        this.writeEvalResult(this.evalSelected());
    }
    catch (e) {
        pkg.javax.swing.JOptionPane.showMessageDialog(null, "PrintIt: " + e.toSource());
    }
}


#selectedCode:
function () {
    return this._widget.getSelectedText();
}


#setWidget:
function anonymous(widget) {
    this._widget = widget;
}


#targetObj:
function anonymous() {
    return this._targetObj;
}


#widget:
function anonymous() {
    return this._widget;
}


#writeEvalResult:
function (txt) {
    var pos = this._widget.getSelectionEnd();
    this._widget.insert(txt, pos);
    this._widget.select(pos, pos + String(txt).length);
}



