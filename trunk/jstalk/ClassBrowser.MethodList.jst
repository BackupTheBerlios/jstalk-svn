name: MethodList
superclass: JSObject
space: ClassBrowser
attributes: [classBrowser,classButton,instanceButton,methods,model,refreshing,widget]
class_attributes: []
doc: ""

#classBrowser:
function() {
    return this._classBrowser;
}

#classButton:
function() {
    return this._classButton;
}

#classToggled:
function() {
    return this._classButton.isSelected();
}

#initialize:
function(classBrowser) {
    this._classBrowser = classBrowser;
    var self = this;
    this._instanceButton = new pkg.javax.swing.JToggleButton("Instance", true);
    this._classButton = new pkg.javax.swing.JToggleButton("Class", false);
    this._instanceButton.addItemListener(JavaEvent.create(function (e) {
        var sel = e.getStateChange() == java.awt.event.ItemEvent.SELECTED;
        self._classButton.setSelected(!sel);
        if (sel) {
            self.refresh();
        }
    }));
    this._classButton.addItemListener(JavaEvent.create(function (e) {
        var sel = e.getStateChange() == java.awt.event.ItemEvent.SELECTED;
        self._instanceButton.setSelected(!sel);
        if (sel) {
            self.refresh();
        }
    }));
    this._model = new pkg.javax.swing.DefaultListModel;
    this._widget = new pkg.javax.swing.JList(this._model);
    this._widget.setSelectionMode(pkg.javax.swing.ListSelectionModel.SINGLE_SELECTION);
    this._widget.addListSelectionListener(JavaEvent.create(function (e) {
        if (self._refreshing) {
            return;
        }
        self._classBrowser.selectMethod(self._widget.getSelectedValue().toString(), self._instanceButton.isSelected());
    }));
    this._widget.addMouseListener(JavaEvent.create(function (e) {
        if (e.getID() == java.awt.event.MouseEvent.MOUSE_CLICKED && pkg.javax.swing.SwingUtilities.isRightMouseButton(e)) {
            self._widget.setSelectedIndex(self._widget.locationToIndex(e.getPoint()));
            var menu = new pkg.javax.swing.JPopupMenu();
            var mi = new pkg.javax.swing.JMenuItem("Add method");
            mi.addActionListener(JavaEvent.create(function () {
                self._classBrowser.addMethod(self._instanceButton.isSelected());
            }));
            menu.add(mi);
            mi = new pkg.javax.swing.JMenuItem("Remove");
            mi.addActionListener(JavaEvent.create(function () {
                self._classBrowser.removeCurrentMethod();
            }));
            menu.add(mi);
            menu.show(e.getComponent(), e.getX(), e.getY());
        }
    }));
}

#instanceButton:
function() {
    return this._instanceButton;
}

#instanceToggled:
function() {
    return this._instanceButton.isSelected();
}

#methods:
function() {
    return this._methods;
}

#model:
function() {
    return this._model;
}

#refresh:
function() {
    this._refreshing = true;
    var selected = this._widget.getSelectedValue();
    this._model.clear();
    var klass = this._classBrowser.currentClass();
    if (!klass) {
        return;
    }
    var methods;
    if (this._instanceButton.isSelected()) {
        methods = klass.instanceMethods().sort();
    } else {
        methods = klass.methods().sort();
    }
    for (var i = 0; i < methods.length; i++) {
        this._model.addElement(methods[i]);
    }
    this._widget.setSelectedValue(selected, true);
    this._refreshing = false;
    //TODO: set the current selection to this._classBrowser.currentMethod()
}

#refreshing:
function() {
    return this._refreshing;
}

#selectMethod:
function(name) {
    this._widget.setSelectedValue(name, true);
}

#setClassBrowser:
function(classBrowser) {
    this._classBrowser = classBrowser;
}

#setClassButton:
function(classButton) {
    this._classButton = classButton;
}

#setInstanceButton:
function(instanceButton) {
    this._instanceButton = instanceButton;
}

#setMethods:
function(methods) {
    this._methods = methods;
}

#setModel:
function(model) {
    this._model = model;
}

#setRefreshing:
function(refreshing) {
    this._refreshing = refreshing;
}

#setWidget:
function(widget) {
    this._widget = widget;
}

#widget:
function() {
    return this._widget;
}


