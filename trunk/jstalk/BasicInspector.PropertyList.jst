name: PropertyList
superclass: JSObject
space: BasicInspector
attributes: [inspector,model,widget]
class_attributes: []
doc: ""

#addProperty:
function(propname) {
    this._model.addElement(propname);
}

#clearProperties:
function() {
    this._model.clear();
}

#createEvents:
function() {
    var self = this;

    // List events
    this._widget.addListSelectionListener(JavaEvent.create(function (e) {
        //updates the valueArea with the value of the selected property

        //prevents lock when _refreshing the list (wich triggers this event)
        //TODO: makes refresh() remove the listener, process and reset the listener
        //this method shouldn`t know about the lock

        if (self._inspector.refreshing()) {
            return;
        }
        if (!e.valueIsAdjusting) {
            var prop = self.selectedProperty();
            self._inspector.showPropertyValue(prop);
        }
    }));
    this._widget.addMouseListener(JavaEvent.create(function (e) {
        if (e.getID() == java.awt.event.MouseEvent.MOUSE_CLICKED && e.getClickCount() == 2) {
            //handle double click
            var prop = self.selectedProperty();
            if (prop == "this") {
                self._inspector.klass().create(self._inspector.obj()).show();
            } else {
                self._inspector.klass().create(self._inspector.obj()[prop]).show();
            }
        }
    }));
}

#initialize:
function(inspector) {
    this._inspector = inspector;
    this._model = new pkg.javax.swing.DefaultListModel;
    this._widget = new pkg.javax.swing.JList(this._model);
    this._widget.setSelectionMode(pkg.javax.swing.ListSelectionModel.SINGLE_SELECTION);
    this.createEvents();
}

#inspector:
function() {
    return this._inspector;
}

#model:
function() {
    return this._model;
}

#selectedProperty:
function() {
    var ret = this._widget.getSelectedValue();
    return ret ? ret.toString() : null;
}

#setInspector:
function(inspector) {
    this._inspector = inspector;
}

#setModel:
function(model) {
    this._model = model;
}

#setSelectedProperty:
function(val) {
    this._widget.setSelectedValue(val, true);
}

#setWidget:
function(widget) {
    this._widget = widget;
}

#widget:
function() {
    return this._widget;
}


